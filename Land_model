import numpy as np
import matplotlib.pyplot as mpl
import geospatialtools.gdal_tools as gst
import os
import json
import datetime
import netCDF4 as nc
import h5py
from PIL import Image

### Variables specific to this program
file_name = "input.json"
map_name = "CLFA_10_5_10/20020101.land_daily_tile.nc"
image_name = "CLFA_10_5_10.tif"
ifile = "image1.tif"
ofile = "image2.tif"
h5file = "image.h5"
start_of_time = datetime.datetime(2002,1,1)
end_of_time = datetime.datetime(2014,12,31)

# Read in the json file
def read_json_file(file_name): return json.load(open(file_name))

# Get spatial limits
def get_spatial_limits(data):
    minlat = data['spatial_limits'][0]['minlat']
    minlon = data['spatial_limits'][1]['minlon']
    maxlat = data['spatial_limits'][2]['maxlat']
    maxlon = data['spatial_limits'][3]['maxlon']
    return np.array([minlon,minlat,maxlon,maxlat])

# Get resolution
def get_resolution(data):
    res = data['resolution'].split("/")
    return float(res[0])/float(res[1])

# Get start and end date
def get_dates(data):
    d1 = np.array(data['time_interval'][0]['start_date'].split(","))
    d2 = np.array(data['time_interval'][1]['end_date'].split(","))
    date1 = datetime.datetime(int(d1[0]),int(d1[1]),int(d1[2]))
    date2 = datetime.datetime(int(d2[0]),int(d2[1]),int(d2[2]))
    return [date1,date2]

# Get variables
def get_vars(data): return data['vars']

# Create array of all possible dates
def get_date_array(start,end,start_date,end_date):
    date1,date2 = start,end
    dates = []
    while (date1 <= date2):
        dates.append(date1)
        date1 = date1 + datetime.timedelta(days=1)
    trim = dates[dates.index(start_date):dates.index(end_date)+1]
    dates = np.array(dates)
    trim = np.array(trim)
    return [dates,trim]

# Perform image warping with command line
def warp(a,b,c,d,e,f,g,h):
    os.system('rm %s'%(h))
    os.system('gdalwarp -tr %f %f -te %f %f %f %f %s %s'%(a,b,c,d,e,f,g,h))


### Read in info
data = read_json_file(file_name)
start_date, end_date = get_dates(data)
res = get_resolution(data)
spatial = get_spatial_limits(data)
variables = get_vars(data)
dates,trim_dates = get_date_array(start_of_time,end_of_time,start_date,end_date)
tile = nc.Dataset(map_name)
f = h5py.File(h5file,"w")

### Iterate through variables
for var in variables:
    tile_var = tile['%s_tile' % var][:,:,0,0]
    geo = gst.read_raster(image_name)
    new = np.copy(geo)
    x = np.unique(new).astype(np.int32)
    x = x[x != -9999]
    md = gst.retrieve_metadata(image_name)
    md['nodata'] = -9999
    date = trim_dates[0]
    lis = []
    
    ### Iterate through all desired dates
    for date in trim_dates:
        for i in x: new[geo == i] = tile_var[(dates == date),i]
        
        ### Create an image for the date; warp it using gdal
        gst.write_raster(ifile,md,new)
        warp(res,res,spatial[0],spatial[1],spatial[2],spatial[3],ifile,ofile)
        
        ### Append the date's data to the list
        im = np.asarray(Image.open(ofile))
        lis.append(im)
    
    ### Add a group to the h5 file containing the variable's data, for all time
    ### steps
    array = np.array(lis)
    group = f.create_group(var)
    data = group.create_dataset("init",data=array)






